version: '3.7'

services:
  # # Frontend service
  # frontend:
  #   build:
  #     context: ./ui
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./ui:/usr/share/nginx/html
  #   ports:
  #     - '80:80'
  #   networks:
  #     - app-network

  # Postgres service
  postgres:
    image: postgres:16.3-alpine3.20
    environment:
      POSTGRES_PASSWORD: postchain
      POSTGRES_DB: postchain
      POSTGRES_USER: postchain
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - app-network

  # Chromia node service
  chr-node:
    build:
      context: .
      dockerfile: Dockerfile.chr-node
    container_name: my-chr-node
    networks:
      - app-network
    depends_on:
      - postgres
    ports:
      - '9870:9870'
      - '7750:7750'
      - '7740:7740'
    healthcheck:
      test: ['CMD', 'pg_isready', '-h', 'postgres', '-U', 'postgres']
      interval: 30s
      retries: 5
    volumes:
      - ./chromia.yml:/app/chromia.yml

  # node-10:
  #     build: ./terminal
  #     volumes:
  #       - ./terminal:/usr/src/app
  #     container_name: Checker10
  #     restart: always
  #     ports:
  #       - 6060:6060
  #     # command: bash -c /usr/src/app/start.sh
  # bun:
  #   build: .
  #   container_name: bun-dev
  #   restart: always
  #   ports:
  #     - 3000:3000
  #   command: bash -c docker exec -it chromia-neural-interface_chr-node_1 sh -c "bun run dev"

  # bun-dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.bun
  #   restart: always
  #   environment:
  #     - XAI_API_KEY=${XAI_API_KEY}
  #     - CHR_NODE_API_URL=http://chr-node:9870
  #   depends_on: 
  #     - chr-node
  #   networks:
  #     - app-network
  #   ports:
  #     - '3000:3000'

  bun-server: 
    image: chromia-neural-interface_chr-node:latest
    container_name: bun-dev-server
    depends_on:
      - chr-node
    # restart: no
    entrypoint: ["bash", "-c", "bun run dev"]

# Volumes and networks
volumes:
  postgres_data: 

networks:
  app-network:
    driver: bridge
